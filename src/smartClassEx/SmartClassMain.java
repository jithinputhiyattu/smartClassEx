/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SmartClassMain.java
 *
 * Created on May 30, 2014, 8:10:32 AM
 */
package smartClassEx;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import javax.swing.JDesktopPane;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import smartDB.Common;

/**
 *
 * @author JITHIN.P
 */
public class SmartClassMain extends javax.swing.JFrame {
    private SmartPanel classSmartPanel;
    private SmartPanel studentSmartPanel;
    private SmartPanel stafSmartPanel;
    private SmartPanel otherSmartPanel;
    private ClassViewPanel classViewPanel;
    private StudentViewPanel studentViewPanel;
    private SubjectReportPanel subjectReportPanel;
    

    /** Creates new form SmartClassMain */
    public SmartClassMain()
    {
        initDialog();
        initComponents();
        setDialog();
       
    }
    private void setDialog()
    { 
         Common.setPosition(this);
         GridLayoutWindow(desktopPane);   
    }

    
    
    

    
    
    public void GridLayoutWindow(JDesktopPane panel)
    {
     panel.setLayout(new GridLayout(1, 1,0, 0));
     
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
       @SuppressWarnings("unchecked")
       private void initComponents() 
	   {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        desktopPane = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        //classSmartPanel = new smartClassEx.SmartPanel();
        //otherSmartPanel = new smartClassEx.SmartPanel();
        //studentSmartPanel = new smartClassEx.SmartPanel();
        //stafSmartPanel = new smartClassEx.SmartPanel();
        jPanel2 = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                onSmartClassMainOpened(evt);
            }
        });

        desktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(classSmartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(studentSmartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(stafSmartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(otherSmartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(classSmartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(studentSmartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(stafSmartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGap(1, 1, 1)
                .addComponent(otherSmartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                //.addContainerGap(23, Short.MAX_VALUE))
                  .addGap(1, 1, 1))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 929, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        
	
	
	

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
       WindowEvent windowEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING );
 processWindowEvent(windowEvent);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    @Override
protected void processWindowEvent(WindowEvent windowEvent) 
{
   
    if (WindowEvent.WINDOW_CLOSING == windowEvent.getID()  )
    {
      if(MessageResult.NO == MessageBox.showMessage( this,"Do you really want to exit?","The new smartClassEx",JOptionPane.YES_NO_OPTION,MessageType.CONFIRM))
      {
         return;
      }
      else
      {
          System.exit(0);
      }
    }
    super.processWindowEvent(windowEvent);
    
}
    private void hideAll()
    {
        
    }
  
    private void onSmartClassMainOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onSmartClassMainOpened
        // TODO add your handling code here:
        
        
        ConfigurationDialog configurationDialog = new ConfigurationDialog(this,true);
        Common.setPosition(configurationDialog);
        configurationDialog.setVisible(true);
        
    }//GEN-LAST:event_onSmartClassMainOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SmartClassMain().setVisible(true);
            }
        });
    }
   
	
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    

    private void initDialog() 
    {
       classSmartPanel = new SmartPanel() {

            @Override
            public void onSmartPanelActionPerformed(ActionEvent evt) {
                onClassSmartPanelActionPerformed(evt);
            }
        };
        
        studentSmartPanel = new SmartPanel() {

            @Override
            public void onSmartPanelActionPerformed(ActionEvent evt) {
              onStudentSmartPanelActionPerformed(evt);
            }
        };
        stafSmartPanel = new SmartPanel() {

            @Override
            public void onSmartPanelActionPerformed(ActionEvent evt) {
              onStaffSmartPanelActionPerformed(evt);
            }
        };
        
        otherSmartPanel = new SmartPanel() {

            @Override
            public void onSmartPanelActionPerformed(ActionEvent evt) {
              onOtherSmartPanelActionPerformed(evt);
            }
        };
        
        
        classViewPanel = new ClassViewPanel(this)
                {
                    @Override
                    public void onReportActionPerformed(ActionEvent evt)
                    {
                            onSmartClassReportActionPerformed(evt);
                    }

          
                };
        
        subjectReportPanel = new SubjectReportPanel();
        
        classSmartPanel.setTitle("Class");
        studentSmartPanel.setTitle("Student");
        stafSmartPanel.setTitle("Staff");
        otherSmartPanel.setTitle("Other"); 
        otherSmartPanel.setCommandNew("Report");
        otherSmartPanel.setCommandUpdate("Settings");
        otherSmartPanel.setCommandView("About");
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
       
        
        
    }
    
      private void onClassSmartPanelActionPerformed(ActionEvent awt)
    {
        
        if(awt.getActionCommand().equals("New"))
        {
            onClassNewButton(awt);
        }
        else if(awt.getActionCommand().equals("Update"))
        {
            onClassUpdateButton(awt);   
        }
        else if(awt.getActionCommand().equals("View"))
        {
            onClassViewButton(awt);
        }
        else
        {
          MessageBox.showMessage(this, awt.getActionCommand(), "Class",MessageType.SIMPLE);
        } 
    }
    private void onStudentSmartPanelActionPerformed(ActionEvent awt)
    {
        
        if(awt.getActionCommand().equals("New"))
        {
            onStudentNewButton(awt);
        }
        else if(awt.getActionCommand().equals("Update"))
        {
         onStudentUpdateButton(awt);   
        }
        else if(awt.getActionCommand().equals("View"))
        {
            onStudentViewButton(awt);
        }
        else
        {
          MessageBox.showMessage(this, awt.getActionCommand(), "Student",MessageType.SIMPLE);
        } 
    }
    
      private void onStaffSmartPanelActionPerformed(ActionEvent awt)
    {
        
        MessageBox.showMessage(this, awt.getActionCommand(), "Staff",MessageType.SIMPLE);
    }
      
      private void onOtherSmartPanelActionPerformed(ActionEvent awt)
    {
        
        if(awt.getActionCommand().equals("About"))
        {
            onAboutActionPerformed(awt);
        }
        else
        {
          MessageBox.showMessage(this, awt.getActionCommand(), "Other",MessageType.SIMPLE);
        }
    }
      
      private void onClassNewButton(ActionEvent awt)
      {
          CreateClassDialog createOrUpdateClass = new CreateClassDialog(this, true,classViewPanel);
          createOrUpdateClass.showDialog();
          
      }
      
      

    private void onClassViewButton(ActionEvent awt)
    {
      hideAll();
      if(null==classViewPanel)
      {
          classViewPanel = new ClassViewPanel(this);
      }
      classViewPanel.setVisible(rootPaneCheckingEnabled);
      desktopPane.removeAll();
      desktopPane.add(classViewPanel) ;
      this.setVisible(true);
    }

    private void onClassUpdateButton(ActionEvent awt)
    {
        UpdateClassDialog  updateClass = new UpdateClassDialog(this, true);
        updateClass.showDialog();
    }

    private void onStudentUpdateButton(ActionEvent awt)
    {
      MessageBox.showMessage(this, "Message recived", "Title", JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE);
    }

    private void onStudentViewButton(ActionEvent awt)
    {
        hideAll();
      if(null==studentViewPanel)
      {
          studentViewPanel = new StudentViewPanel(this);
      }
      studentViewPanel.setVisible(rootPaneCheckingEnabled);
      desktopPane.removeAll();
      desktopPane.add(studentViewPanel) ;
      this.setVisible(true);
    }

    private void onStudentNewButton(ActionEvent awt)
    {
        CreateStudentDialog createStudentDialog = new CreateStudentDialog(this, rootPaneCheckingEnabled);
        createStudentDialog.showDialog();
    }
    
    
    
    /*
     * 
     */
    private void onSmartClassReportActionPerformed(ActionEvent evt) 
    {
       hideAll();
      if(null==subjectReportPanel)
      {
          subjectReportPanel = new SubjectReportPanel();
      }
      subjectReportPanel.showDialog(classViewPanel.getSelectedClassID(), null);
      desktopPane.removeAll();
      desktopPane.add(subjectReportPanel);
      this.setVisible(true);  
            
    }

    private void onAboutActionPerformed(ActionEvent awt)
    {
        AboutDialog aboutDialog = new AboutDialog(this, rootPaneCheckingEnabled);
        aboutDialog.showDialog();
    }

   
}
